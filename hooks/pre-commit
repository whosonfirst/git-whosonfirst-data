#!/usr/bin/env python
# -*-python-*-

import os
import sys
import logging

import sys
import re
import subprocess

import StringIO

import mapzen.whosonfirst.validator
import mapzen.whosonfirst.export
import mapzen.whosonfirst.utils

logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':

   logging.info("invoking git-whosonfirst-mapzen pre-commit hooks")

   # who's on first... har har har... sad trombone
   
   whoami = sys.argv[0]
   whoami = os.path.abspath(whoami)

   hooks = os.path.dirname(whoami)
   dotgit = os.path.dirname(hooks)
   root = os.path.dirname(dotgit)

   data = os.path.join(root, "data")
   meta = os.path.join(root, "meta")

   # sudo put me in a function

   modified = re.compile('^[MA]\s+(?P<name>.*)$')

   out = subprocess.check_output(["git", "status", "--porcelain"])
   files = []

   for line in out.splitlines():

      match = modified.match(line)

      if match:

         fname = match.group('name')
         
         # account for alt files here... how?
         # also sudo put this logic in a function

         if fname.endswith(".geojson"):
            files.append(fname)
      
   # end sudo put me in a function

   if len(files) == 0:
      sys.exit(0)

   vld = mapzen.whosonfirst.validator.validator()

   exporter = mapzen.whosonfirst.export.flatfile(data)
   updated = []
      
   for f in files:

      path = os.path.join(root, f)
      logging.info("validating %s" % path)

      rpt = vld.validate_file(path)

      if not rpt.ok():

         logging.error("%s FAILED validation test" % path)

         # sudo make the following less bad...
         # (20151111/thisisaaronland)

         fh = StringIO.StringIO()
         rpt.print_report(fh)
         fh.seek(0)

         logging.error("validation report is:\n%s" % "".join(fh.readlines()))

         sys.exit(1)

      logging.info("formatting and exportifying %s" % path)

      feature = mapzen.whosonfirst.utils.load_file(path)
      exporter.export_feature(feature)

      updated.append(path)

   mapzen.whosonfirst.utils.update_placetype_metafiles(meta, updated)

   sys.exit(0)
