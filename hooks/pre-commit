#!/usr/bin/env python
# -*-python-*-

import os
import sys
import logging

import sys
import re
import subprocess

import StringIO

import mapzen.whosonfirst.validator
import mapzen.whosonfirst.export
import mapzen.whosonfirst.utils

logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':

   out = subprocess.check_output(["git", "log", "-1", "HEAD"])
   out = out.splitlines()
   
   ignore, hash = out[0].split(" ")

   logging.info("invoking git-whosonfirst-mapzen pre-commit hooks for %s" % hash)

   # who's on first... har har har... sad trombone
   
   whoami = sys.argv[0]
   whoami = os.path.abspath(whoami)

   hooks = os.path.dirname(whoami)
   dotgit = os.path.dirname(hooks)
   root = os.path.dirname(dotgit)

   data = os.path.join(root, "data")
   meta = os.path.join(root, "meta")

   # sudo put me in a function

   modified = re.compile('^[MA]\s+(?P<name>.*)$')

   out = subprocess.check_output(["git", "status", "--porcelain"])
   files = []

   for line in out.splitlines():

      match = modified.match(line)

      if match:

         fname = match.group('name')
         
         # account for alt files here... how?
         # also sudo put this logic in a function

         if fname.endswith(".geojson"):
            files.append(fname)
      
   # end sudo put me in a function

   if len(files) == 0:
      logging.info("nothing in this commit that we need to apply pre-commit to")
      sys.exit(0)

   vld = mapzen.whosonfirst.validator.validator()

   exporter = mapzen.whosonfirst.export.flatfile(data)
   updated = []

   recommit = []

   for rel_path in files:

      abs_path = os.path.join(root, rel_path)
      logging.info("validating %s" % abs_path)

      rpt = vld.validate_file(abs_path)

      if not rpt.ok():

         logging.error("%s FAILED validation test" % abs_path)

         # sudo make the following less bad...
         # (20151111/thisisaaronland)

         fh = StringIO.StringIO()
         rpt.print_report(fh)
         fh.seek(0)

         logging.error("validation report is:\n%s" % "".join(fh.readlines()))
         sys.exit(1)

      logging.info("formatting and exportifying %s" % abs_path)

      # actually export the file - this will do formatting, ensure various properties
      # are set and assign the lastmodified time

      feature = mapzen.whosonfirst.utils.load_file(abs_path)
      exporter.export_feature(feature)

      # append the absolute path to a list of things to reference when rebuilding the
      # meta files; append the relative path to a list of things to reference when
      # updating the commit so that changes to the individual records and meta files
      # are included; this is some serious git-magic rain-dancing happenind here so
      # please to ensure that it never escapes this file (20151112/thisisaaronland)

      updated.append(abs_path)
      recommit.append(rel_path)

   # these are the meta files (including the -latest.csv pointers) that need to be made relative
   # in order to dance with the git commit
   
   _modified, _created = mapzen.whosonfirst.utils.update_placetype_metafiles(meta, updated)

   modified = []
   created = []

   for path in _modified:
      path = path.replace(root + "/", "")
      modified.append(path)

   for path in _created:
      path = path.replace(root + "/", "")
      created.append(path)

   recommit.extend(modified)
   recommit.extend(created)

   # this is the part where we write the modified files to disk to be picked up by the
   # post-commit hook because trying to add them to the git index here results in one
   # face-stabby git error after another (take your pick) - if someone knows how to do
   # this (add/append the newly modified files to the current commit) at this stage I 
   # would love to hear about it. (20151112/thisisaaronland)

   # see also:
   # https://stackoverflow.com/questions/3284292/can-a-git-hook-automatically-add-files-to-the-commit

   if len(recommit):

      dotcommit = os.path.join(root, ".commit")
      logging.info("writing %s to disk to be processed by the post-commit hook" % dotcommit)

      fh = open(dotcommit, "w")
      fh.write("\n".join(recommit))
      fh.close()

   sys.exit(0)
