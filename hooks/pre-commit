#!/usr/bin/env python
# -*-python-*-

import logging
logging.basicConfig(level=logging.INFO)

import sys
import re

import geojson
import subprocess

import mapzen.whosonfirst.validator
import mapzen.whosonfirst.export
import mapzen.whosonfirst.utils

if __name__ == '__main__':

   # who's on first... har har har... sad trombone
   
   whoami = sys.argv[0]
   whoami = os.path.abspath(whoami)

   hooks = os.path.dirname(whoami)
   dotgit = os.path.dirname(hooks)
   root = os.path.dirname(dotgit)

   data = os.path.join(root, "data")

   # sudo put me in a function

   modified = re.compile('^[MA]\s+(?P<name>.*)$')

   out = subprocess.check_output(["git", "status", "--porcelain"])
   files = []

   for line in out.splitlines():

      match = modified.match(line)

      if match:

         fname = match.group('name')
         
         # account for alt files here... how?

         if fname.endswith(".geojson"):
            files.append(fname)
      
   # end sudo put me in a function

   if len(files) == 0:
      sys.exit(0)

   exporter = mapzen.whosonfirst.export.flatfile(data)

   meta_files = {}

   for f in files:

      vld = mapzen.whosonfirst.validator.validator()
      rpt = vld.validate_file(f)

      if rpt.ok():
         logging.info("%s passes validation test" % f)
      else:

         # print report here...

         logging.error("%s FAILED validation test" % f)
         sys.exit(1)

      fh = open(f, 'r')
      feature = geojson.load(fh)

      props = feature['properties']
      wofid = props['wof:id']
      placetype = props['wof:placetype']

      to_update = meta_files.get(placetype, [])
      to_update.append(wofid)

      meta_files[placetype] = to_update

      exporter.export_feature(feature)

   # process meta files here

   sys.exit(1)
