#!/usr/bin/env python
# -*-python-*-

import os
import sys
import logging

import sys
import re
import subprocess

import mapzen.whosonfirst.git

logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('--start-commit', dest='start_commit', action='store', default=None, help='The starting commit hash for determining changes (default is HEAD -2)')
   opt_parser.add_option('--stop-commit', dest='stop_commit', action='store', default=None, help='The ending commit hash for determining changes (default is HEAD -1)')

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)

   # In case some one is running this straight out of the
   # .git/hooks folder

   whoami = os.path.abspath(sys.argv[0])
   whatami = os.path.basename(whoami)

   if os.path.islink(whoami):
      whoami = os.path.realpath(whoami)

   hooks = os.path.dirname(whoami)
   root = os.path.dirname(hooks)

   bin = os.path.join(root, "bin")
   lib = os.path.join(root, "lib")

   logging.info("append %s to path" % lib)
   sys.path.append(lib)

   import wof.common

   wof.common.check_pylibs()

   base = os.path.abspath(os.getcwd())
   wof.common.ensure_is_wof_repo(base)

   start_commit = options.start_commit
   stop_commit = options.stop_commit

   if start_commit:

      if not stop_commit:
         last_commit = mapzen.whosonfirst.git.get_current_hash()
         stop_commit = last_commit

      logging.info("invoking git-whosonfirst-mapzen %s hooks for %s - %s" % (whatami, start_commit, stop_commit))

   else:

      last_commit = mapzen.whosonfirst.git.get_current_hash()
      logging.info("invoking git-whosonfirst-mapzen %s hooks for whatever is different from %s" % (whatami, last_commit))

   diff = mapzen.whosonfirst.git.get_diff(start_commit, stop_commit)
   logging.info("invoking hooks on %s possible files" % len(diff))

   files = wof.common.filter_for_wof_documents(diff)

   if len(files) == 0:
      logging.info("nothing in this commit that we need to apply %s hooks to" % whatami)
      sys.exit(0)

   wof.common.ensure_valid_wof_documents(base, files)

   # PLEASE WRITE ME

   updated = []
   recommit = []

   for rel_path in files:

      abs_path = os.path.join(base, rel_path)
      logging.info("validating %s" % abs_path)

      updated.append(abs_path)
      recommit.append(rel_path)

   modified, created = wof.common.update_ancillary_files(base, updated)
      
   recommit.extend(modified)
   recommit.extend(created)

   # this is the part where we write the modified files to disk to be picked up by the
   # post-commit hook because trying to add them to the git index here results in one
   # face-stabby git error after another (take your pick) - if someone knows how to do
   # this (add/append the newly modified files to the current commit) at this stage I 
   # would love to hear about it. (20151112/thisisaaronland)

   # see also:
   # https://stackoverflow.com/questions/3284292/can-a-git-hook-automatically-add-files-to-the-commit

   if len(recommit):

      dotcommit = os.path.join(base, ".commit")
      logging.info("writing %s to disk to be processed by the post-commit hook" % dotcommit)

      fh = open(dotcommit, "w")
      fh.write("\n".join(recommit))
      fh.close()

   sys.exit(0)
