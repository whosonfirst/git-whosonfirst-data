#!/usr/bin/env python
# -*-python-*-

# Please to be reading this before you start making changes here:
# https://github.com/whosonfirst/git-whosonfirst-data#caveats

import os
import sys
import logging

import sys
import re
import subprocess

import pkg_resources
import requests

import StringIO

import mapzen.whosonfirst.validator
import mapzen.whosonfirst.export
import mapzen.whosonfirst.utils
import mapzen.whosonfirst.diff
import mapzen.whosonfirst.git

logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('--start-commit', dest='start_commit', action='store', default=None, help='The starting commit hash for determining changes (default is HEAD -2)')
   opt_parser.add_option('--stop-commit', dest='stop_commit', action='store', default=None, help='The ending commit hash for determining changes (default is HEAD -1)')

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)

   # Some basic sanity checking to ensure that people are running the most recent
   # version of the py-mz-wof libraries (20160127/thisisaaronland)

   pymz = pkg_resources.get_distribution("mapzen.whosonfirst").version
   pymz = pymz.rstrip("-")

   current = None

   try:
      logging.info("I am going to try and see whether you are using the most recent version of py-mapzen-whosonfirst...")

      rsp = requests.get("https://raw.githubusercontent.com/whosonfirst/py-mapzen-whosonfirst/master/VERSION")
      current = rsp.content
      current = current.strip()

   except Exception, e:
      logging.warning("Failed to determine ACTUAL current version of py-mapzen-whosonfirst, because %s (setting current to %s for now but don't be surprised if HILARITY ensues...)" % (e, pymz))
      current = pymz

   if pymz != current:
      logging.warning("You are running version %s of py-mapzen-whosonfirst but the current version is %s - you should update because HILARITY may ensue if you don't" % (pymz, current))

   # who's on first... har har har... sad trombone - remember that unlike
   # the other git hooks which are meant to be copied over to the wof-data
   # .git/hooks repository this one is stored somewhere and meant to be
   # invoked *from* the wof-data repository (20151113/thisisaaronland)

   root = os.getcwd()
   base = os.path.basename(root)

   if not base.startswith("whosonfirst-data"):
      logging.error("I don't think I am being invoked in the whosonfirst-data-* repository... RUNNING AWAY SCARED")
      sys.exit(1)

   # What do we have to work with...

   start_commit = options.start_commit
   stop_commit = options.stop_commit

   if not start_commit:
      start_commit = mapzen.whosonfirst.git.get_previous_hash()

   if not stop_commit:
      stop_commit = mapzen.whosonfirst.git.get_current_hash()

   logging.info("invoking git-whosonfirst-mapzen post-push hooks for %s - %s" % (start_commit, stop_commit))

   diff = mapzen.whosonfirst.git.get_diff(start_commit, stop_commit)
   logging.info("invoking hooks on %s possible files" % len(diff))

   #

   whoami = sys.argv[0]
   whoami = os.path.abspath(whoami)

   hooks = os.path.dirname(whoami)
   dotgit = os.path.dirname(hooks)
   root = os.path.dirname(dotgit)

   data = os.path.join(root, "data")
   meta = os.path.join(root, "meta")

   files = []

   for fname in diff:

      parsed = mapzen.whosonfirst.utils.parse_filename(fname)

      if not parsed:
         continue

      id, suffix = parsed

      if suffix:
         logging.info("%s has a suffix (%s) so skipping" % (fname, suffix))
         continue
            
      files.append(fname)

   if len(files) == 0:
      logging.info("nothing in this commit that we need to apply pre-commit hooks to")
      sys.exit(0)

   vld = mapzen.whosonfirst.validator.validator()

   updated = []
   recommit = []

   # sudo replace with wof-validate-files
   # (20160512/thisisaaronland)

   for rel_path in files:

      abs_path = os.path.join(root, rel_path)
      logging.info("validating %s" % abs_path)

      rpt = vld.validate_file(abs_path)

      if not rpt.ok():

         logging.error("%s FAILED validation test" % abs_path)

         # sudo make the following less bad...
         # (20151111/thisisaaronland)

         fh = StringIO.StringIO()
         rpt.print_report(fh)
         fh.seek(0)

         logging.error("validation report is:\n%s" % "".join(fh.readlines()))
         sys.exit(1)

      updated.append(abs_path)
      recommit.append(rel_path)

   # these are used to extend 'modified' and 'created' below

   modified = []
   created = []

   # meta files

   # these are the meta files (including the -latest.csv pointers) that need to be made relative
   # in order to dance with the git commit

   # ensure relative paths to files in the meta files

   meta_kwargs = {
      'paths': 'relative',
      'prefix': data,
   }

   _modified, _created = mapzen.whosonfirst.utils.update_placetype_metafiles(meta, updated, **meta_kwargs)

   for path in _modified:
      path = path.replace(root + "/", "")
      modified.append(path)

   for path in _created:
      path = path.replace(root + "/", "")
      created.append(path)

   # Concordances - IMPORTANT: per the caveats in the 'update_concordances_metafile'
   # method we are still not pruning files in updated for only those with actual
   # updates (to their concordances). This is being done with the mapzen.whosonfirst.diff
   # library. We will probably move this up the stack (in this workflow) at some point
   # but for today it lives here... (20160122/thisisaaronland)

   diff = mapzen.whosonfirst.diff.compare(source=root)
   updated_concordances = []

   for path in updated:

      path = os.path.abspath(path)
      id, ignore = mapzen.whosonfirst.utils.parse_filename(path)

      try:
         report = diff.report(id)
         logging.info("change report for %s: %s" % (path, report))

         if report['concordances'] == True:
            updated_concordances.append(path)
      except Exception, e:
         logging.warning("failed to generate report for %s, because %s" % (path, e))

   logging.info("count updated: %d count updated w/ updated concordances: %d" % (len(updated), len(updated_concordances)))

   if updated_concordances:
      concordances = meta			# this will change (20160119/thisisaaronland)
      concordances_kwargs = meta_kwargs		# these probably won't change but giving them a bespoke name anyway

      _modified, _created = mapzen.whosonfirst.utils.update_concordances_metafile(concordances, updated_concordances, **concordances_kwargs)

      for path in _modified:
         path = path.replace(root + "/", "")
         modified.append(path)

      for path in _created:
         path = path.replace(root + "/", "")
         created.append(path)

   # phew!

   recommit.extend(modified)
   recommit.extend(created)

   # this is the part where we write the modified files to disk to be picked up by the
   # post-commit hook because trying to add them to the git index here results in one
   # face-stabby git error after another (take your pick) - if someone knows how to do
   # this (add/append the newly modified files to the current commit) at this stage I 
   # would love to hear about it. (20151112/thisisaaronland)

   # see also:
   # https://stackoverflow.com/questions/3284292/can-a-git-hook-automatically-add-files-to-the-commit

   if len(recommit):

      dotcommit = os.path.join(root, ".commit")
      logging.info("writing %s to disk to be processed by the post-commit hook" % dotcommit)

      fh = open(dotcommit, "w")
      fh.write("\n".join(recommit))
      fh.close()

   sys.exit(0)
