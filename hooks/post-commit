#!/usr/bin/env python
# -*-python-*-

import os
import sys
import logging

import subprocess

import mapzen.whosonfirst
import mapzen.whosonfirst.git

if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)

   if not mapzen.whosonfirst.is_current(liberal=True):
      logging.error("E_INSUFFICENT_MAPZEN")
      sys.exit(1)

   # In case some one is running this straight out of the
   # .git/hooks folder

   whoami = os.path.abspath(sys.argv[0])
   whatami = os.path.basename(whoami)

   if os.path.islink(whoami):
      whoami = os.path.realpath(whoami)

   hooks = os.path.dirname(whoami)
   root = os.path.dirname(hooks)

   bin = os.path.join(root, "bin")
   lib = os.path.join(root, "lib")

   logging.info("append %s to path" % lib)
   sys.path.append(lib)

   import wof.common

   base = os.path.abspath(os.getcwd())
   wof.common.ensure_is_wof_repo(base)

   logging.info("invoking git-whosonfirst-mapzen post-commit hooks")

   files = []

   # see also: notes in pre-commit
   # see also-er: https://stackoverflow.com/questions/3284292/can-a-git-hook-automatically-add-files-to-the-commit

   dotcommit = os.path.join(base, ".commit")

   if not os.path.exists(dotcommit):
      logging.info("%s does not exist, so apparently there is nothing for %s hooks to do" % (dotcommit, whatami))
      sys.exit(0)

   logging.info("%s exists, so I am going to look for files that have been modified" % dotcommit)

   to_add = []

   fh = open(dotcommit)

   for rel_path in fh.readlines():

      rel_path = rel_path.strip()
      abs_path = os.path.join(base, rel_path)
      
      if not os.path.exists(abs_path):
         continue

      to_add.append(rel_path)
      
   fh.close()

   logging.info("remove %s" % dotcommit)
   os.unlink(dotcommit)

   if not len(to_add):
      logging.info("%s did not contain any files to process... which is weird")
      sys.exit(0)

   stop_commit = mapzen.whosonfirst.git.get_current_hash()

   cmd = ["git", "add", "meta"]

   # Hey look - see what's happening here? We're only
   # "adding" stuff in the meta directory since that's
   # the only place that (as of this writing) new files
   # should have been created. The alternative is the
   # scenario descibed in issue #3 where I tried to add
   # 90K files on the command-line. The results were
   # entirely predictable in retrospect....
   # (20151117/thisisaaronland)
   
   # cmd.extend(to_add)
   
   out = subprocess.check_output(cmd)
   
   logging.info(" ".join(cmd))
   logging.debug(out)
   
   # note the --no-verify flag  - this is very very very important
   # without it you will send git in to an endless spiral where it
   # invokes the pre-commit hook... which you know maybe is a good
   # interview question (good albeit cruel) but isn't very useful
   # for actually getting any work done... (20151112/thisisaaronland)
   
   cmd = ["git", "commit", "--amend", "-C", stop_commit, "--no-verify"]
   logging.debug(" ".join(cmd))
   
   out = subprocess.check_output(cmd)
   logging.info(out)
   
   # see also: post-push-async for handling commits
   # see also: post-merge for handling PRs and merges

   sys.exit(0)
