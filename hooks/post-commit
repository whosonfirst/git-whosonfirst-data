#!/usr/bin/env python
# -*-python-*-

# Please to be reading this before you start making changes here:
# https://github.com/whosonfirst/git-whosonfirst-data#caveats

import os
import sys
import logging

import subprocess

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.git

logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('--start-commit', dest='start_commit', action='store', default=None, help='The starting commit hash for determining changes (default is HEAD -2)')
   opt_parser.add_option('--stop-commit', dest='stop_commit', action='store', default=None, help='The ending commit hash for determining changes (default is HEAD -1)')

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)

   # What do we have to work with...

   start_commit = options.start_commit
   stop_commit = options.stop_commit

   if not start_commit:
      start_commit = mapzen.whosonfirst.git.get_previous_hash()

   if not stop_commit:
      stop_commit = mapzen.whosonfirst.git.get_current_hash()

   logging.info("invoking git-whosonfirst-mapzen post-push hooks for %s - %s" % (start_commit, stop_commit))

   # I am not sure we even need any of this... (20160331/thisisaaronland)
   # diff = mapzen.whosonfirst.git.get_diff(start_commit, stop_commit)
   # logging.info("invoking hooks on %s possible files" % len(diff))

   #

   whoami = sys.argv[0]
   whoami = os.path.abspath(whoami)

   hooks = os.path.dirname(whoami)
   dotgit = os.path.dirname(hooks)
   root = os.path.dirname(dotgit)

   data = os.path.join(root, "data")
   meta = os.path.join(root, "meta")

   files = []

   # see also: notes in pre-commit
   # see also-er: https://stackoverflow.com/questions/3284292/can-a-git-hook-automatically-add-files-to-the-commit

   dotcommit = os.path.join(root, ".commit")

   if os.path.exists(dotcommit):

      logging.info("%s exists, so I am going to look for files that have been modified" % dotcommit)

      to_add = []

      fh = open(dotcommit)

      for rel_path in fh.readlines():

         rel_path = rel_path.strip()
         abs_path = os.path.join(root, rel_path)

         if not os.path.exists(abs_path):
            continue

         to_add.append(rel_path)
      
      fh.close()
      os.unlink(dotcommit)

      if len(to_add):

         cmd = ["git", "add", "meta"]

         # Hey look - see what's happening here? We're only
         # "adding" stuff in the meta directory since that's
         # the only place that (as of this writing) new files
         # should have been created. The alternative is the
         # scenario descibed in issue #3 where I tried to add
         # 90K files on the command-line. The results were
         # entirely predictable in retrospect....
         # (20151117/thisisaaronland)

         # cmd.extend(to_add)
         
         out = subprocess.check_output(cmd)

         logging.info(" ".join(cmd))
         logging.debug(out)

         # note the --no-verify flag  - this is very very very important
         # without it you will send git in to an endless spiral where it
         # invokes the pre-commit hook... which you know maybe is a good
         # interview question (good albeit cruel) but isn't very useful
         # for actually getting any work done... (20151112/thisisaaronland)

         cmd = ["git", "commit", "--amend", "-C", stop_commit, "--no-verify"]
         logging.debug(" ".join(cmd))

         out = subprocess.check_output(cmd)

         logging.info(" ".join(cmd))
         logging.info(out)

   # not a bug - we just haven't defined anything beyond this stage
   # see post-push-async for hooks to push to S3 etc (20151113/thisisaaronland)

   sys.exit(0)
