#!/usr/bin/env python
# -*-python-*-

# Please to be reading these before you start making changes here:
# https://github.com/whosonfirst/git-whosonfirst-data#post-push
# https://github.com/whosonfirst/git-whosonfirst-data#caveats
# https://stackoverflow.com/questions/1797074/local-executing-hook-after-a-git-push#3466589

# $ git config alias.xpush '!git push $1 $2 && /usr/local/mapzen/git-whosonfirst-data/hooks/post-push'
# (remember the backslash before the ! if your shell requires it)

import os
import sys
import logging
import subprocess

import mapzen.whosonfirst.aws

logging.basicConfig(level=logging.INFO)
   
if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('--s3', dest='s3', action='store_true', default=False, help='Sync files to S3 (default is False)')
   opt_parser.add_option('--s3-bucket', dest='s3_bucket', action='store', default=None, help='The name of the S3 bucket to sync files to')
   opt_parser.add_option('--s3-prefix', dest='s3_prefix', action='store', default=None, help='The name of the prefix to sync files in the S3 bucket to')
   opt_parser.add_option('--s3-credentials', dest='s3_credentials', action='store', default=None, help='The path to your AWS S3 credentials')
   
   options, args = opt_parser.parse_args()

   out = subprocess.check_output(["git", "log", "-1", "HEAD"])
   out = out.splitlines()
   
   ignore, hash = out[0].split(" ")

   logging.info("invoking git-whosonfirst-mapzen post-push hooks for %s" % hash)

   # who's on first... har har har... sad trombone - remember that unlike
   # the other git hooks which are meant to be copied over to the wof-data
   # .git/hooks repository this one is stored somewhere and meant to be
   # invoked *from* the wof-data repository (20151113/thisisaaronland)

   root = os.getcwd()

   if os.path.basename(root) != "whosonfirst-data":
      logging.error("I don't think I am being invoked in the whosonfirst-data repository... RUNNING AWAY SCARED")
      sys.exit(1)

   data = os.path.join(root, "data")
   meta = os.path.join(root, "meta")

   out = subprocess.check_output(["git", "show", "--pretty=format:", "--name-only", "HEAD"])
   files = []

   for fname in out.splitlines():

      parsed = mapzen.whosonfirst.utils.parse_filename(fname)

      if not parsed:
         continue

      files.append(fname)

   if len(files) == 0:
      logging.info("nothing else in this commit that we need to apply post-push hooks to")
      sys.exit(0)

   if options.s3:

      bucket = options.s3_bucket
      prefix = options.s3_prefix
      credentials = options.s3_credentials

      # see also:
      # http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs

      if credentials:
         os.environment["AWS_CREDENTIALS_FILE"] = credentials

      creds = os.path.join(os.environ.get("HOME"), ".aws", "credentials")

      if not os.path.exists(creds) and not os.environ.get("AWS_CREDENTIALS_FILE", None):
         logging.info("can't find default AWS credentials file and no environment variable set")

      else:

         s3 = mapzen.whosonfirst.aws.s3(bucket=bucket)

         for f in files:

            path = os.path.join(root, f)
            logging.info("copy %s to S3" % path)
            
            s3.store_file(path, prefix=prefix)

   sys.exit(0)
