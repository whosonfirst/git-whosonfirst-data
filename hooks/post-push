#!/usr/bin/env python
# -*-python-*-

# Please to be reading these before you startmaking changes here:
# https://github.com/whosonfirst/git-whosonfirst-data#post-push
# https://github.com/whosonfirst/git-whosonfirst-data#caveats
# https://stackoverflow.com/questions/1797074/local-executing-hook-after-a-git-push#3466589

# $ git config alias.xpush '!git push $1 $2 && /usr/local/mapzen/git-whosonfirst-data/hooks/post-push-async --s3 --s3-bucket whosonfirst.mapzen.com --s3-prefix data --slack --slack-config /usr/local/mapzen/slackcat/slackcat.conf'

# (remember the backslash before the ! if your shell requires it)

import os
import sys
import logging
import subprocess
import tempfile

import mapzen.whosonfirst
import mapzen.whosonfirst.utils
import mapzen.whosonfirst.git

if __name__ == '__main__':

   import optparse

   opt_parser = optparse.OptionParser()

   opt_parser.add_option('-c', '--config', dest='config', action='store', default=None, help='')
   opt_parser.add_option('-f', '--force', dest='force', action='store_true', default=False, help='')

   opt_parser.add_option('--start-commit', dest='start_commit', action='store', default=None, help='The starting commit hash for determining changes (default is HEAD -2)')
   opt_parser.add_option('--stop-commit', dest='stop_commit', action='store', default=None, help='The ending commit hash for determining changes (default is HEAD -1)')

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)

   if not mapzen.whosonfirst.is_current(liberal=True):
      logging.error("E_INSUFFICENT_MAPZEN")
      sys.exit(1)

   # In case some one is running this straight out of the
   # .git/hooks folder

   whoami = os.path.abspath(sys.argv[0])
   whatami = os.path.basename(whoami)

   if os.path.islink(whoami):
      whoami = os.path.realpath(whoami)

   hooks = os.path.dirname(whoami)
   root = os.path.dirname(hooks)

   bin = os.path.join(root, "bin")
   lib = os.path.join(root, "lib")

   logging.info("append %s to path" % lib)
   sys.path.append(lib)

   import wof.common

   base = os.path.abspath(os.getcwd())
   wof.common.ensure_is_wof_repo(base)

   cfg = wof.common.ensure_hooks_cfg(whoami, options.config)

   #

   start_commit = options.start_commit
   stop_commit = options.stop_commit

   if start_commit:

      if not stop_commit:
         last_commit = mapzen.whosonfirst.git.get_current_hash()
         stop_commit = last_commit

      logging.info("invoking git-whosonfirst-mapzen %s hooks for %s - %s" % (whatami, start_commit, stop_commit))

   else:

      last_commit = mapzen.whosonfirst.git.get_current_hash()
      logging.info("invoking git-whosonfirst-mapzen %s hooks for whatever is different from %s" % (whatami, last_commit))

   #

   diff = mapzen.whosonfirst.git.get_diff(start_commit, stop_commit)
   logging.info("invoking hooks on %s possible files" % len(diff))

   if len(diff) == 0:
      logging.info("nothing in this commit that we need to apply %s hooks to" % whatami)
      sys.exit(0)
   
   files = wof.common.filter_for_wof_documents(diff)

   if len(files) == 0:
      logging.info("nothing in this commit that we need to apply %s hooks to" % whatami)
      sys.exit(0)

   # SUDO PUT ME IN common.py

   whatami = sys.platform

   if whatami == 'darwin':
      bin = os.path.join(bin, "darwin")
   elif whatami == 'win32':
      bin = os.path.join(bin, "windows")
   elif whatami == 'linux' or whatami == 'linux2':	# seriously... I have no idea what linux2 is...
      bin = os.path.join(bin, "linux")        
   else:
      logging.error("unknown or unsupported platform: %s" % whatami)
      sys.exit(1)

   sync_tool = os.path.join(bin, "wof-sync-files")			# go-whosonfirst-s3
   index_tool = os.path.join(bin, "wof-es-index-filelist")		# py-mapzen-whosonfirst-search
   clone_tool = os.path.join(bin, "wof-clone-metafiles")		# go-whosonfirst-clone
   bundle_tool = os.path.join(bin, "wof-bundle-placetypes")		# py-mapzen-whosonfirst-bundles

   do_s3 = cfg.getboolean('post-push', 's3')
   do_es = cfg.getboolean('post-push', 'es')
   do_bundles = cfg.getboolean('post-push', 'bundle')

   if do_s3:
      import wof.s3
      wof.s3.sync_files(base, files, sync_tool, cfg)

   if do_es:
      import wof.es
      wof.es.index_files(base, files, index_tool, cfg)

   if do_bundles:
      import wof.bundles
      wof.bundles.update_bundles(base, bundle_tool, clone_tool, cfg)

   # end of SUDO PUT ME IN common.py

   sys.exit(0)
