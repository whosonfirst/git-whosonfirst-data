#!/usr/bin/env python
# -*-python-*-

# Please to be reading these before you startmaking changes here:
# https://github.com/whosonfirst/git-whosonfirst-data#post-push
# https://github.com/whosonfirst/git-whosonfirst-data#caveats
# https://stackoverflow.com/questions/1797074/local-executing-hook-after-a-git-push#3466589

# $ git config alias.xpush '!git push $1 $2 && /usr/local/mapzen/git-whosonfirst-data/hooks/post-push-async --s3 --s3-bucket whosonfirst.mapzen.com --s3-prefix data --slack --slack-config /usr/local/mapzen/slackcat/slackcat.conf'

# (remember the backslash before the ! if your shell requires it)

import os
import sys
import logging
import subprocess
import tempfile

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.git

if __name__ == '__main__':

   import optparse
   import ConfigParser

   opt_parser = optparse.OptionParser()

   opt_parser.add_option('-c', '--config', dest='config', action='store', default=None, help='')
   opt_parser.add_option('-f', '--force', dest='force', action='store_true', default=False, help='')

   opt_parser.add_option('--start-commit', dest='start_commit', action='store', default=None, help='The starting commit hash for determining changes (default is HEAD -2)')
   opt_parser.add_option('--stop-commit', dest='stop_commit', action='store', default=None, help='The ending commit hash for determining changes (default is HEAD -1)')

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)

   # who's on first... har har har... sad trombone - remember that unlike
   # the other git hooks which are meant to be copied over to the wof-data
   # .git/hooks repository this one is stored somewhere and meant to be
   # invoked *from* the wof-data repository (20151113/thisisaaronland)

   root = os.getcwd()
   base = os.path.basename(root)

   if not base.startswith("whosonfirst-data"):
      logging.error("I don't think I am being invoked in the whosonfirst-data-* repository... RUNNING AWAY SCARED")
      sys.exit(1)

   # In case some one is running this straight out of the
   # .git/hooks folder

   whoami = os.path.abspath(sys.argv[0])

   if os.path.islink(whoami):
      whoami = os.path.realpath(whoami)

   # Can has config?

   if not options.config:

      hooks = os.path.dirname(whoami)
      path_config = os.path.join(hooks, 'hooks.cfg')

   else:
      path_config = os.path.abspath(options.config)

   if not os.path.exists(path_config):
      logging.error("INVISIBLE CONFIG FILE %s" % path_config)
      sys.exit(1)

   cfg = ConfigParser.ConfigParser()
   cfg.read(path_config)

   #

   hooks = os.path.dirname(whoami)
   root = os.path.dirname(hooks)

   bin = os.path.join(root, "bin")
   lib = os.path.join(root, "lib")

   logging.info("append %s to path" % bin)
   sys.path.append(bin)

   # What do we have to work with...

   start_commit = options.start_commit
   stop_commit = options.stop_commit

   if not start_commit:
      start_commit = mapzen.whosonfirst.git.get_previous_hash()

   if not stop_commit:
      stop_commit = mapzen.whosonfirst.git.get_current_hash()

   logging.info("invoking git-whosonfirst-mapzen post-push hooks for %s - %s" % (start_commit, stop_commit))

   data = os.path.join(base, "data")
   meta = os.path.join(base, "meta")

   files = mapzen.whosonfirst.git.get_diff(start_commit, stop_commit)
   logging.info("invoking hooks on %s possible files" % len(diff))

   if len(files) == 0 and not options.force:
      logging.info("nothing in this commit that we need to apply post-push-async hooks to")
      sys.exit(0)
   
   whatami = sys.platform

   if whatami == 'darwin':
      bin = os.path.join(bin, "osx")
   elif whatami == 'win32':
      bin = os.path.join(bin, "windows")
   elif whatami == 'linux' or whatami == 'linux2':	# seriously... I have no idea what linux2 is...
      bin = os.path.join(bin, "linux")        
   else:
      logging.error("unknown or unsupported platform: %s" % whatami)
      sys.exit(1)

   sync_tool = os.path.join(bin, "wof-sync-files")			# go-whosonfirst-s3
   index_tool = os.path.join(bin, "wof-es-index-filelist")		# py-mapzen-whosonfirst-search
   clone_tool = os.path.join(bin, "wof-clone-metafiles")		# go-whosonfirst-clone
   bundle_tool = os.path.join(bin, "wof-bundle-placetypes")		# py-mapzen-whosonfirst-bundles

   do_s3 = cfg.getboolean('post-push', 's3')
   do_es = cfg.getboolean('post-push', 'es')
   do_bundles = cfg.getboolean('post-push', 'bundle')

   if do_s3:
      import wof.s3
      wof.s3.sync_files(base, files, sync_tool, cfg)

   if do_es:
      import wof.es
      wof.es.sync_files(base, files, index_tool, cfg)

   if do_bundles:
      import wof.bundles
      wof.bundles.update_bundles(base, bundle_tool, clone_tool, cfg)

   sys.exit(0)
