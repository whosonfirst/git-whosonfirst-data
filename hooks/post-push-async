#!/usr/bin/env python
# -*-python-*-

# Please to be reading these before you start making changes here:
# https://github.com/whosonfirst/git-whosonfirst-data#post-push
# https://github.com/whosonfirst/git-whosonfirst-data#caveats
# https://stackoverflow.com/questions/1797074/local-executing-hook-after-a-git-push#3466589

# $ git config alias.xpush '!git push $1 $2 && /usr/local/mapzen/git-whosonfirst-data/hooks/post-push-async --s3 --s3-bucket whosonfirst.mapzen.com --s3-prefix data --slack --slack-config /usr/local/mapzen/slackcat/slackcat.conf'

# (remember the backslash before the ! if your shell requires it)

import os
import sys
import logging
import subprocess
import tempfile

import mapzen.whosonfirst.utils

if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('--s3', dest='s3', action='store_true', default=False, help='Sync files to S3 (default is False)')
   opt_parser.add_option('--s3-bucket', dest='s3_bucket', action='store', default=None, help='The name of the S3 bucket to sync files to')
   opt_parser.add_option('--s3-prefix', dest='s3_prefix', action='store', default=None, help='The name of the prefix to sync files in the S3 bucket to')
   opt_parser.add_option('--s3-credentials', dest='s3_credentials', action='store', default=None, help='The path to your AWS S3 credentials')

   opt_parser.add_option('--es', dest='es', action='store_true', default=False, help='Sync files to Elasticsearch (default is False)')
   opt_parser.add_option('--es-host', dest='es_host', action='store', default='localhost', help='The hostname of the Elasticsearch endpoint (default is localhost)')
   opt_parser.add_option('--es-port', dest='es_port', action='store', default='9200', help='The hostname of the Elasticsearch endpoint (default is 9200)')

   opt_parser.add_option('--bundle', dest='bundle', action='store_true', default=False, help='Regenerate placetype bundles (default is False)')
   opt_parser.add_option('--bundle-dest', dest='bundle_dest', action='store', default=None, help='Where placetype bundles are stored locally (default is None)')

   opt_parser.add_option('--slack', dest='slack', action='store_true', default=False, help='Send a message to a Slack channel (using the WOF fork of slackcat) once all the transfers are complete')
   opt_parser.add_option('--slack-config', dest='slack_config', action='store', default=None, help='The path to your slackcat config file')

   opt_parser.add_option('--commit-hash', dest='commit_hash', action='store', default="HEAD", help='Invoke hooks for a specific commit hash, default is HEAD')

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)

   commit_hash = options.commit_hash

   if commit_hash == "HEAD":

      cmd = ["git", "log", "-1", "HEAD"]
      logging.debug(" ".join(cmd))

      out = subprocess.check_output(cmd)
      out = out.splitlines()
      
      ignore, hash = out[0].split(" ")

   else:
      hash = commit_hash

   logging.info("invoking git-whosonfirst-mapzen post-push hooks for %s" % hash)

   # who's on first... har har har... sad trombone - remember that unlike
   # the other git hooks which are meant to be copied over to the wof-data
   # .git/hooks repository this one is stored somewhere and meant to be
   # invoked *from* the wof-data repository (20151113/thisisaaronland)

   root = os.getcwd()
   base = os.path.basename(root)

   if not base.startswith("whosonfirst-data"):
      logging.error("I don't think I am being invoked in the whosonfirst-data-* repository... RUNNING AWAY SCARED")
      sys.exit(1)

   data = os.path.join(root, "data")
   meta = os.path.join(root, "meta")

   cmd  = ["git", "show", "--pretty=format:", "--name-only", commit_hash]
   logging.debug(" ".join(cmd))

   out = subprocess.check_output(cmd)
   files = []

   for rel_path in out.splitlines():

      parsed = mapzen.whosonfirst.utils.parse_filename(rel_path)

      if not parsed:
         continue

      # See this - this bit is important. The go-whosonfirst-s3 SyncFile
      # function assumes that it is working with absolute paths in order
      # to know how to prune and append the relevant bits in order to 
      # figure out who's on first (hahaha...) both locally and remotely
      # in a world where they two sources may have different parents. The
      # code (in Go) in question is included below as a reference. Please
      # do not expect anything to work if you uncomment it...
      # (20151123/thisisaaronland)
      
      """

        dest := source
        dest = strings.Replace(dest, root, "", -1)

        if sink.Prefix != "" {
                dest = path.Join(sink.Prefix, dest)
        }

      """

      abs_path = os.path.abspath(rel_path)
      files.append(abs_path)

   if len(files) == 0:
      logging.info("nothing in this commit that we need to apply post-push-async hooks to")
      sys.exit(0)

   bucket = options.s3_bucket
   prefix = options.s3_prefix
   credentials = options.s3_credentials
   
   whoami = os.path.abspath(sys.argv[0])
   hooks = os.path.dirname(whoami)
   hooks_root = os.path.dirname(hooks)
   bin = os.path.join(hooks_root, 'bin')
   
   whatami = sys.platform

   if whatami == 'darwin':
      bin = os.path.join(bin, "osx")
   elif whatami == 'win32':
      bin = os.path.join(bin, "windows")
   elif whatami == 'linux' or whatami == 'linux2':	# seriously... I have no idea what linux2 is...
      bin = os.path.join(bin, "linux")        
   else:
      logging.error("unknown or unsupported platform: %s" % whatami)
      sys.exit(1)

   sync_tool = os.path.join(bin, "wof-sync-files")			# go-whosonfirst-s3
   index_tool = os.path.join(bin, "wof-es-index-filelist")		# py-mapzen-whosonfirst-search
   clone_tool = os.path.join(bin, "wof-clone-metafiles")		# go-whosonfirst-clone
   bundle_tool = os.path.join(bin, "wof-bundle-placetypes")		# py-mapzen-whosonfirst-bundles

   if options.s3:

      fh = tempfile.NamedTemporaryFile(delete=False)
      tmpfile = fh.name

      fh.write("\n".join(files))
      fh.close()

      #

      cmd = [
         sync_tool,
         "-bucket", bucket,
         "-root", data,
         "-processes", "200",
         "-file-list", tmpfile,
         "-tidy"	# this will unlink tmpfile
      ]
      
      if prefix:
         cmd.extend(["-prefix", prefix])

      if credentials:
         cmd.extend(["-credentials", credentials])

      if options.slack:
         cmd.extend([
            "-slack"
         ])

      if options.slack_config:
         cmd.extend([
            "-slack-config",
            options.slack_config,
         ])

      str_cmd = " ".join(cmd)
      logging.info("getting ready to %s" % str_cmd)

      # Run cmd as a background process and exit out of git post-push hoohah
      # https://stackoverflow.com/questions/89228/calling-an-external-command-in-python#2251026
      # 
      # I can not get the following args (to Popen) to work
      # because... well, I have no idea (20151123/thisisaaronland)
      
      # creationflags=subprocess.DETACHED_PROCESS)

      p = subprocess.Popen(cmd)
      pid = p.pid

      logging.info("launched with PID %s" % (pid))

      # For example:
      #
      # INFO:root:getting ready to /usr/local/mapzen/go-whosonfirst-s3/bin/wof-sync-files -bucket whosonfirst.mapzen.com -root /usr/local/data/whosonfirst-data/data \
      # -file-list /tmp/tmp3zHxja -tidy -slack -slack-config /usr/local/slackcat/.slackcat.conf
      # INFO:root:launched with PID 9629
      # $> ps -p 9629
      # PID TTY          TIME CMD
      # 9629 pts/8    00:00:08 wof-sync-files
      #
      # And then in 15.623659793s the following gets written to STDOUT (and to slack if so configured):
      # [wof-sync-files] 23:16:44.105606 [status] Scheduled 733 Completed 733 Success 634 Error 0 Skipped 99 Time 15.623659793s

   if options.es:

      fh = tempfile.NamedTemporaryFile(delete=False)
      tmpfile = fh.name

      fh.write("\n".join(files))
      fh.close()

      cmd = [
         index_tool,
         "--host", options.es_host,
         "--tidy"
      ]

      if options.slack:
         cmd.extend([
            "--slack"
         ])

      if options.slack_config:
         cmd.extend([
            "--slack-config",
            options.slack_config,
         ])

      cmd.append(tmpfile)

      str_cmd = " ".join(cmd)
      logging.info("getting ready to %s" % str_cmd)

      p = subprocess.Popen(cmd)
      pid = p.pid

      logging.info("launched with PID %s" % (pid))

   # generate new bundles

   if options.bundle:

      bundle_dest = os.path.abspath(options.bundle_dest)
      
      cmd = [
         bundle_tool, 
         "-s", root,
         "-d", bundle_dest,
         "-S", "latest",
         "--wof-clone", clone_tool,
         "--aws-bucket", bucket,
      ]

      if credentials:
         cmd.extend(["--aws-creds", credentials])

      str_cmd = " ".join(cmd)
      logging.info("getting ready to %s" % str_cmd)

      p = subprocess.Popen(cmd)
      pid = p.pid

      logging.info("launched with PID %s" % (pid))

   sys.exit(0)
