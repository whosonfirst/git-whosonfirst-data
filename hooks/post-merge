#!/usr/bin/env python
# -*-python-*-

# Please to be reading this before you start making changes here:
# https://github.com/whosonfirst/git-whosonfirst-data#caveats

import os
import sys
import logging

import subprocess

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.git

logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('-c', '--config', dest='config', action='store', default=None, help='')

   opt_parser.add_option('--start-commit', dest='start_commit', action='store', default=None, help='The starting commit hash for determining changes (default is HEAD -2 --no-merges)')
   opt_parser.add_option('--stop-commit', dest='stop_commit', action='store', default=None, help='The ending commit hash for determining changes (default is HEAD -1)')

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=True, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)



   start_commit = options.start_commit
   stop_commit = options.stop_commit

   if not start_commit:

      # skip things we've merged and start from the last known commit here - maybe?
      # see also: https://github.com/whosonfirst/git-whosonfirst-data/issues/11

      start_commit = mapzen.whosonfirst.git.get_previous_hash(merges=False)

   if not stop_commit:
      stop_commit = mapzen.whosonfirst.git.get_current_hash()

   logging.info("invoking git-whosonfirst-mapzen post-merge hooks for %s - %s" % (start_commit, stop_commit))

   files = mapzen.whosonfirst.git.get_diff(start_commit, stop_commit)

   if len(files) == 0:
      logging.info("apparently there are no changes... which is weird... like life, sometimes")
      sys.exit(0)

   #

   dotchanged = ".changed-%s-%s" % (start_commit, stop_commit)
   fh = open(dotchanged, "w")

   for fname in files:
      logging.info("%s has changed" % fname)
      fh.write("%s\n" % fname)

   fh.close()
   logging.info("created %s with the list of files that have been updated" % dotchanged)

   #

   import wof.validate

   if not wof.validate.validate_files(repo, files):
      logging.error("one or more files failed validation")
      sys.exit(1)

   #

   import wof.meta
   import wof.concordances

   modified = []
   created = []

   _modified, _created = wof.meta.update_metafiles(repo, files)

   modified.extend(_modified)
   created.extend(_created)

   _modified, _created = wof.concordances.update_concordances(repo, files)

   modified.extend(_modified)
   created.extend(_created)

   # do something with modified and created here... like commit them, etc.
   # (20160512/thisisaaronland)

   # start of boilerplate-deploy
   # ---------------------------

   sync_tool = os.path.join(bin, "wof-sync-files")			# go-whosonfirst-s3
   index_tool = os.path.join(bin, "wof-es-index-filelist")		# py-mapzen-whosonfirst-search
   clone_tool = os.path.join(bin, "wof-clone-metafiles")		# go-whosonfirst-clone
   bundle_tool = os.path.join(bin, "wof-bundle-placetypes")		# py-mapzen-whosonfirst-bundles

   do_s3 = cfg.getboolean('post-push', 's3')
   do_es = cfg.getboolean('post-push', 'es')
   do_bundles = cfg.getboolean('post-push', 'bundle')

   if do_s3:
      import wof.s3
      wof.s3.sync_files(base, files, sync_tool, cfg)

   if do_es:
      import wof.es
      wof.es.sync_files(base, files, index_tool, cfg)

   if do_bundles:
      import wof.bundles
      wof.bundles.update_bundles(base, bundle_tool, clone_tool, cfg)

   # -------------------------
   # end of boilerplate-deploy

   logging.info("removing %s" % dotchanged)
   os.unlink(dotchanged)

   sys.exit(0)
