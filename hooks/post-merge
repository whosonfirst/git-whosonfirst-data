#!/usr/bin/env python
# -*-python-*-

# Please to be reading this before you start making changes here:
# https://github.com/whosonfirst/git-whosonfirst-data#caveats

import os
import sys
import logging

import subprocess

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.git

logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('--start-commit', dest='start_commit', action='store', default=None, help='The starting commit hash for determining changes (default is HEAD -2)')
   opt_parser.add_option('--stop-commit', dest='stop_commit', action='store', default=None, help='The ending commit hash for determining changes (default is HEAD -1)')

   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=True, help='Be chatty (default is false)')
   
   options, args = opt_parser.parse_args()

   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)

   start_commit = options.start_commit
   stop_commit = options.stop_commit

   if not start_commit:

      # skip things we've merged and start from the last known commit here - maybe?
      # see also: https://github.com/whosonfirst/git-whosonfirst-data/issues/11

      start_commit = mapzen.whosonfirst.git.get_previous_hash(merges=False)

   if not stop_commit:
      stop_commit = mapzen.whosonfirst.git.get_current_hash()

   logging.info("invoking git-whosonfirst-mapzen post-merge hooks for %s - %s" % (start_commit, stop_commit))

   diff = mapzen.whosonfirst.git.get_diff(start_commit, stop_commit)

   if len(diff) == 0:
      logging.info("apparently there are no changes... which is weird... like life, sometimes")
      sys.exit(0)

   dotchanged = ".changed-%s-%s" % (start_commit, stop_commit)
   fh = open(dotchanged, "w")

   # if necessary - for example if we get changes from a PR from someone who
   # doesn't have all the hoohah to generate ancillary files then we want to
   # - generate meta files
   # - trigger bundle making
   # - clone to s3
   # - clone to ES (maybe?)

   for fname in diff:
      logging.info("%s has changed" % fname)
      fh.write("%s\n" % fname)

   fh.close()
   logging.info("created %s with the list of files that have been updated" % dotchanged)

   # cat .changed-* | sort | uniq | grep geojson > .process

   sys.exit(0)
